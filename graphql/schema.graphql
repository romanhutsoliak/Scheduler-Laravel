"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    name: String
    email: String
    email_verified_at: DateTime
    timezoneOffset: Int
    created_at: DateTime!
    updated_at: DateTime!
}

type Task {
    id: ID!
    name: String!
    description: String
    startDateTime: DateTime
    stopDateTime: DateTime
    nextRunDateTime: DateTime
    mustBeCompleted: Boolean
    isActive: Boolean
    user: User
    hasEvent: Boolean
    periodType: String
    periodTypeTime: String
    periodTypeWeekDays: [String]
    periodTypeMonthDays: [String]
    periodTypeMonths: [String]
}
type TaskHistory {
    taskId: ID!
    notes: String
    created_at: DateTime
}
type UserDevice {
    deviceId: String!
    platform: String
    manufacturer: String
    model: String
    appVersion: String
    notificationToken: String
    updated_at: String
}

type ResultOk {
    result: String
}

type Query @guard {
    tasks(orderBy: [OrderBySchema!] @orderBy): [Task!]
        @whereAuth(relation: "user")
        @paginate(defaultCount: 10)
    task(id: ID @eq): Task @find
    taskHistory(
        taskId: ID @eq
        orderBy: [OrderBySchema!] @orderBy
    ): [TaskHistory] @all
}
extend type Query {
    currentUser: User @auth
}

type Mutation @guard {
    createTask(
        name: String! @rules(apply: ["required"])
        description: String
        periodType: String
        periodTypeTime: String
        periodTypeWeekDays: [String]
        periodTypeMonthDays: [String]
        periodTypeMonths: [String]
        mustBeCompleted: Boolean
        isActive: Boolean
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@create")
    updateTask(
        id: ID! @eq @rules(apply: ["integer", "required"])
        name: String! @rules(apply: ["required"])
        description: String
        periodType: String
        periodTypeTime: String
        periodTypeWeekDays: [String]
        periodTypeMonthDays: [String]
        periodTypeMonths: [String]
        mustBeCompleted: Boolean
        isActive: Boolean
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@update")
    createUserDevice(
        deviceId: String
        platform: String
        manufacturer: String
        model: String
        appVersion: String
        notificationToken: String
    ): UserDevice
        @field(resolver: "App\\GraphQL\\Mutations\\UserDeviceMutator@create")
    updateUserTimezone(timezoneOffset: Int!): User
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@updateTimezone")
    completeTask(id: ID! @eq, notes: String): Task
        @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@completeTask")
    deleteTask(id: ID! @eq): ResultOk
        @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@deleteTask")
}
# it shouldn't be @guard as it breaks login/register page when no language
extend type Mutation {
    createMissedLanguage(
        language: String,
        text: String,
        url: String
    ): ResultOk @field(resolver: "App\\GraphQL\\Mutations\\MissedLanguageMutator@create")
}

# auth
# ------------------------------------------------------------------
type Login {
    user: User
    token: String
}
extend type Mutation {
    login(email: String! @rules(apply: ["email"]), password: String!): Login
    userRegistration(
        name: String
        email: String! @rules(apply: ["email", "unique:users,email"])
        password: String! @rules(apply: ["confirmed"])
        password_confirmation: String!
    ): Login @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@register")
    logout(deviceId: String): ResultOk @guard
        @field(resolver: "App\\GraphQL\\Mutations\\Logout")
    createUserFromDevice(deviceId: String!, timezoneOffset: Int): Login
        @field(
            resolver: "App\\GraphQL\\Mutations\\UserMutator@createFromDevice"
        )
    updateProfile(
        name: String
        email: String! @rules(apply: ["email"])
        password: String @rules(apply: ["confirmed"])
        password_confirmation: String
    ): User
        @guard
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@update")
}

enum SortOrder {
    ASC
    DESC
}

# type Query @guard {
#     user(
#         id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
#         email: String
#             @eq
#             @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     ): User @find
#     users(name: String @where(operator: "like")): [User!]
#         @paginate(defaultCount: 10)
# }
