"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Task {
    id: ID!
    name: String!
    description: String
    startDateTime: DateTime
    stopDateTime: DateTime
    nextRunDateTime: DateTime
    user: User
    hasEvent: Boolean
    periodType: String
    periodTypeTime: String
    periodTypeWeekDays: [String]
    periodTypeMonthDays: [String]
    periodTypeMonths: [String]
}
type TaskHistory {
    taskId: ID!
    notes: String
    created_at: DateTime
}
type UserDevice {
    deviceId: String!
    platform: String
    manufacturer: String
    model: String
    appVersion: String
    notificationToken: String
}

type Query @guard {
    tasks(orderBy: [OrderBySchema!] @orderBy): [Task!]
        @paginate(defaultCount: 10)
    task(id: ID @eq): Task @find
    taskHistory(
        taskId: ID @eq
        orderBy: [OrderBySchema!] @orderBy
    ): [TaskHistory] @all
}
extend type Query {
    currentUser: User @auth
}

type Mutation @guard {
    createTask(
        name: String! @rules(apply: ["required"])
        description: String
        periodType: String
        periodTypeTime: String
        periodTypeWeekDays: [String]
        periodTypeMonthDays: [String]
        periodTypeMonths: [String]
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@create")
    updateTask(
        id: ID! @eq @rules(apply: ["integer", "required"])
        name: String! @rules(apply: ["required"])
        description: String
        periodType: String
        periodTypeTime: String
        periodTypeWeekDays: [String]
        periodTypeMonthDays: [String]
        periodTypeMonths: [String]
    ): Task @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@update")
    createUserDevice(
        deviceId: String
        platform: String
        manufacturer: String
        model: String
        appVersion: String
        notificationToken: String
    ): UserDevice
        @field(resolver: "App\\GraphQL\\Mutations\\UserDeviceMutator@create")
    completeTask(id: ID! @eq, notes: String): Task
        @field(resolver: "App\\GraphQL\\Mutations\\TaskMutator@completeTask")
}

# auth
# ------------------------------------------------------------------
type Login {
    user: User
    token: String
}
extend type Mutation {
    login(email: String!, password: String!): Login
    logout: Login @guard
    updateProfile(
        id: ID @eq
        name: String! @rules(apply: ["required"])
        email: String! @rules(apply: ["email"])
    ): User @update
}

enum SortOrder {
    ASC
    DESC
}

# type Query @guard {
#     user(
#         id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
#         email: String
#             @eq
#             @rules(apply: ["prohibits:id", "required_without:id", "email"])
#     ): User @find
#     users(name: String @where(operator: "like")): [User!]
#         @paginate(defaultCount: 10)
# }
